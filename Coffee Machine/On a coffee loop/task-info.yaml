type: edu
custom_name: stage5
files:
- name: machine/coffee_machine.py
  visible: true
  text: "# Write your code here\n\ndef give_status(state):\n    print(\"The coffee\
    \ machine has:\")\n    print(\"{} of water\".format(state.get(\"water\")))\n \
    \   print(\"{} of milk\".format(state.get(\"milk\")))\n    print(\"{} of coffee\
    \ beans\".format(state.get(\"beans\")))\n    print(\"{} of disposable cups\".format(state.get(\"\
    discups\")))\n    print(\"{} of money\".format(state.get(\"money\")))\n    \n\
    \    \ndef buy(state):\n    print(\"What do you want to buy? 1 - espresso, 2 -\
    \ latte, 3 - cappuccino:\")\n    drink_choice = input()\n    state[\"discups\"\
    ] = state.get(\"discups\") - 1\n    if drink_choice == \"1\":\n        state[\"\
    water\"] = state.get(\"water\") - 250\n        state[\"beans\"] = state.get(\"\
    beans\") - 16\n        state[\"money\"] = state.get(\"money\") + 4\n    elif drink_choice\
    \ == \"2\":\n        state[\"water\"] = state.get(\"water\") - 350\n        state[\"\
    milk\"] = state.get(\"milk\") - 75\n        state[\"beans\"] = state.get(\"beans\"\
    ) - 20\n        state[\"money\"] = state.get(\"money\") + 7\n    else:\n     \
    \   state[\"water\"] = state.get(\"water\") - 200\n        state[\"milk\"] = state.get(\"\
    milk\") - 100\n        state[\"beans\"] = state.get(\"beans\") - 12\n        state[\"\
    money\"] = state.get(\"money\") + 6\n    \n        \ndef fill(state):\n    print(\"\
    Write how many ml of water do you want to add:\")\n    state[\"water\"] = state.get(\"\
    water\") + int(input())\n    print(\"Write how many ml of milk do you want to\
    \ add:\")\n    state[\"milk\"] = state.get(\"milk\") + int(input())\n    print(\"\
    Write how many grams of coffee beans do you want to add:\")\n    state[\"beans\"\
    ] = state.get(\"beans\") + int(input())\n    print(\"Write how many disposable\
    \ cups of coffee do you want to add:\")\n    state[\"discups\"] = state.get(\"\
    discups\") + int(input())\n    \n    \ndef take(state):\n    print(\"I gave you\
    \ ${}\".format(state.get(\"money\")))\n    state[\"money\"] = 0\n\n\nstate = {\n\
    \    'money' : 550,\n    'water' : 400,\n    'milk' : 540,\n    'beans' : 120,\n\
    \    'discups' : 9\n}\ngive_status(state)\nprint(\"Write action (buy, fill, take):\"\
    )\nchoice = input()\nif choice == \"buy\":\n    buy(state)\nelif choice == \"\
    fill\":\n    fill(state)\nelse:\n    take(state)\ngive_status(state)\n\n\n#print(\"\
    Write how many ml of water the coffee machine has:\")\n#    water = int(input())\n\
    #    print(\"Write how many ml of milk the coffee machine has:\")\n#    milk =\
    \ int(input())\n#    print(\"Write how many grams of coffee beans the coffee machine\
    \ has:\")\n#        beans = int(input())\n#    print(\"Write how many cups of\
    \ coffee you will need:\")\n#    cups = int(input())\n#    cups_available = 0\n\
    #    while water >= 200 and milk >= 50 and beans >= 15:\n#    cups_available +=\
    \ 1\n#    water = water - 200\n#    milk = milk - 50\n#    beans = beans - 15\n\
    #    if cups == cups_available:\n#    print(\"Yes, I can make that amount of coffee\"\
    )\n#    elif cups_available > cups:\n#        extra = cups_available - cups\n\
    #        print(\"Yes, I can make that amount of coffee (and even {} more than\
    \ that)\".format(extra))\n#    else:\n#        print(\"No, I can make only {}\
    \ cups of coffee\".format(cups_available)) \n    \n#water_needed = cups * 200\n\
    #milk_needed = cups * 50\n#beans_needed = cups * 15           \n#print(\"For {}\
    \ cups of coffee you will need:\".format(cups))\n#print(\"{} ml of water\".format(water_needed))\n\
    #print(\"{} ml of milk\".format(milk_needed))\n#print(\"{} g of coffee beans\"\
    .format(beans_needed))\n\n\n#print(\"Starting to make a coffee\")\n#print(\"Grinding\
    \ coffee beans\")\n#print(\"Boiling water\")\n#print(\"Mixing boiled water with\
    \ crushed coffee beans\")\n#print(\"Pouring coffee into the cup\")\n#print(\"\
    Pouring some milk into the cup\")\n#print(\"Coffee is ready!\")"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/370/implement#comment
status: Solved
record: 4
